---
- name: "Add Go to shell profile"
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    state: "present"
    prepend_newline: true
    append_newline: true
    marker: "# ==== {mark} ANSIBLE GO CONFIG"
    block: |
      if command -v go 1>/dev/null 2>&1; then
          export PATH="$HOME/go/bin:$PATH"
      fi

- name: "Get installed Go versions"
  ansible.builtin.shell: |
    set -o pipefail
    /home/linuxbrew/.linuxbrew/bin/brew list | grep '^go@' | sed 's/go@//'
  register: go_installed_versions
  changed_when: false
  failed_when: false

- name: "Remove unwanted Go versions"
  ansible.builtin.command:
    cmd: "/home/linuxbrew/.linuxbrew/bin/brew uninstall go@{{ item }}"
  with_items: "{{ go_installed_versions.stdout_lines | default([]) }}"
  when:
    - go_installed_versions.rc == 0
    - item not in go_versions
  changed_when: true

- name: "Install and configure Go latest"
  when: go_versions | length == 0
  block:
    - name: "Install latest Go"
      ansible.builtin.command:
        cmd: "/home/linuxbrew/.linuxbrew/bin/brew install go"
        creates: "/home/linuxbrew/.linuxbrew/bin/go"

    - name: "Set latest Go as global version"
      ansible.builtin.command:
        cmd: "/home/linuxbrew/.linuxbrew/bin/brew link --force go"
      changed_when: true

- name: "Install and configure Go versions"
  when: go_versions | length > 0
  block:
    - name: "Install specific Go versions"
      ansible.builtin.command:
        cmd: "/home/linuxbrew/.linuxbrew/bin/brew install go@{{ item }}"
        creates: "/home/linuxbrew/.linuxbrew/Cellar/go@{{ item }}"
      with_items: "{{ go_versions }}"

    - name: "Unlink existing Go package"
      ansible.builtin.command:
        cmd: "/home/linuxbrew/.linuxbrew/bin/brew unlink go"
      when: go_global_version != ""
      failed_when: false
      changed_when: false

    - name: "Set specific Go version as global"
      ansible.builtin.command:
        cmd: "/home/linuxbrew/.linuxbrew/bin/brew link --overwrite go@{{ go_global_version }}"
      when: go_global_version != ""
      changed_when: true
